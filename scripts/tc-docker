#!/bin/sh
#
# @file tc-docker
# @version v2.0
# @description Tiny Core Linux (tcl) Core x86 in docker
# @author linic
# @copyright All rights reserved. Read LICENSE.txt file for the license terms.
#
# Changelog:
#
# [YYYY-MM-DD]        [author]
# [brief description]
#
# 2024-01-28        linic
# Making necessary changes to generate a Core x86 image.
#
# [DD-MM-YYYY]
# 26/08/2022        innovarew
# v1.0 Initial version
#

PROGNAME=`basename "$0"`;
PROGAUTHOR="linic"
PROGVERSION="v2.0";

TCL_RELEASE="14.x"
TCL_ARCHITECTURE="x86"
TC_URL=http://tinycorelinux.net/$TCL_RELEASE/$TCL_ARCHITECTURE/
ISO_URL=$TC_URL/release/Core-current.iso
TCZ_URL=$TC_URL/tcz

DATA_DIR=$PWD/data
TCE_DIR=$DATA_DIR/tce/optional
[ ! -d $TCE_DIR ] && mkdir -p $TCE_DIR
ROOT_DIR=$DATA_DIR/root
[ ! -d $ROOT_DIR ] && mkdir -p $ROOT_DIR
TCL_DIR=$DATA_DIR/tiny_core_linux
[ ! -d $TCL_DIR ] && mkdir -p $TCL_DIR

tce_rootfs_init()
{
    TC_VER=$TCL_RELEASE-$TCL_ARCHITECTURE
    TC_TAR="rootfs-$TC_VER.tar.xz"
    TC_PATCH="rootfs-$TC_VER.patch"

    echo "# $ISO_URL"
    (
        cd $DATA_DIR

        # unpack rootfs core.gz
        tce_rootfs_unpack "$@"

        # rootfs contains .ko.gz not used by docker
        find $ROOT_DIR -name '*.ko.gz' -exec rm {} \;

        # get unsquashfs into container to unpack tcz
        tce_install liblzma.tcz $ROOT_DIR
        tce_install squashfs-tools.tcz $ROOT_DIR

        patch -p2 < $TC_PATCH
    )

    (cd $ROOT_DIR; tar cJf ../$TC_TAR .)
}

tce_rootfs_unpack()
{
    ISO_FILE=$(basename $ISO_URL)

    wget -qc "$ISO_URL"
    # wget -qc "$ISO_URL.md5.txt" && md5sum -c `basename "$ISO_URL.md5.txt"`

    7z x -o$TCL_DIR $ISO_FILE
    (cd $ROOT_DIR; zcat $TCL_DIR/boot/core.gz | cpio --extract)
}

tce_cddir()
{
    if [ $PWD != $TCE_DIR ]
    then
        cd $TCE_DIR
    fi
}

# usage: tce_install squashfs-tools.tcz /
tce_install()
{
    [ $# -lt 2 ] && usage

    local app=$1
    local root=$2

    if [ -e $root/usr/local/tce.installed/${app%.tcz} ]
    then
        usage "warn: $app already installed in $root"
    fi

    (
        tce_cddir

        if wget -qc $TCZ_URL/$app.dep
        then
            for dep in `cat $app.dep`
            do
                tce_install $dep $root
            done
        fi

        wget -qc $TCZ_URL/$app
        wget -qc $TCZ_URL/$app.md5.txt
        ! md5sum -c $app.md5.txt && return

        unsquashfs -n -d "$root" -f $app

        # update system
        mkdir -p $root/usr/local/tce.installed/
        touch $root/usr/local/tce.installed/${app%.tcz}

        # update libs
        #if [ -w /etc/ld.so.cache ]
        #then
        #    ldconfig
        #fi
    )
}

tce_info()
{
    [ $# -lt 1 ] && usage
    local app=$1
    (
        tce_cddir
        [ ! -e $app.info ] && wget -qc $TCZ_URL/$app.info
        cat $app.info
    )
}

tce_list()
{
    [ $# -lt 1 ] && usage
    local app=$1
    (
        tce_cddir
        [ ! -e $app.list ] && wget -qc $TCZ_URL/$app.list
        cat $app.list
    )
}

tce_dep()
{
    [ $# -lt 1 ] && usage
    local app=$1
    (
        tce_cddir
        [ ! -e $app.list ] && wget -qc $TCZ_URL/$app.dep
        cat $app.dep
    )
}

tce_search()
{
    (
        tce_cddir
        wget -qc $TCZ_URL
        cat `basename $TCZ_URL`
    )
}

usage()
{
    if [ $# -eq 0 ]
    then
        echo "usage: $PROGNAME [tce_rootfs_init|tce_install] # @version $PROGVERSION @copyright $PROGAUTHOR";
        exit;
    else
        echo "$@"
        return
    fi
}

main()
{
    [ $# -lt 1 ] && usage

    "$@"
}

main "$@"
